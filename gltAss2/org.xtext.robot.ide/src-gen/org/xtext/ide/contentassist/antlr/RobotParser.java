/*
 * generated by Xtext 2.11.0
 */
package org.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ide.contentassist.antlr.internal.InternalRobotParser;
import org.xtext.services.RobotGrammarAccess;

public class RobotParser extends AbstractContentAssistParser {

	@Inject
	private RobotGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalRobotParser createParser() {
		InternalRobotParser result = new InternalRobotParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives_2_0(), "rule__Expression__Alternatives_2_0");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getSingletonTypesAccess().getAlternatives(), "rule__SingletonTypes__Alternatives");
					put(grammarAccess.getOrientationAccess().getAlternatives(), "rule__Orientation__Alternatives");
					put(grammarAccess.getRobotAccess().getGroup(), "rule__Robot__Group__0");
					put(grammarAccess.getRobotAccess().getGroup_6(), "rule__Robot__Group_6__0");
					put(grammarAccess.getRobotAccess().getGroup_6_2(), "rule__Robot__Group_6_2__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_2(), "rule__Expression__Group_2__0");
					put(grammarAccess.getCommentAccess().getGroup(), "rule__Comment__Group__0");
					put(grammarAccess.getTraceAccess().getGroup(), "rule__Trace__Group__0");
					put(grammarAccess.getBuildWallAccess().getGroup(), "rule__BuildWall__Group__0");
					put(grammarAccess.getDropMarkAccess().getGroup(), "rule__DropMark__Group__0");
					put(grammarAccess.getWhileStatementAccess().getGroup(), "rule__WhileStatement__Group__0");
					put(grammarAccess.getWhileStatementAccess().getGroup_4(), "rule__WhileStatement__Group_4__0");
					put(grammarAccess.getWhileStatementAccess().getGroup_4_2(), "rule__WhileStatement__Group_4_2__0");
					put(grammarAccess.getRepeatStatementAccess().getGroup(), "rule__RepeatStatement__Group__0");
					put(grammarAccess.getRepeatStatementAccess().getGroup_4(), "rule__RepeatStatement__Group_4__0");
					put(grammarAccess.getRepeatStatementAccess().getGroup_4_2(), "rule__RepeatStatement__Group_4_2__0");
					put(grammarAccess.getIfElseStatementAccess().getGroup(), "rule__IfElseStatement__Group__0");
					put(grammarAccess.getIfElseStatementAccess().getGroup_4(), "rule__IfElseStatement__Group_4__0");
					put(grammarAccess.getIfElseStatementAccess().getGroup_4_2(), "rule__IfElseStatement__Group_4_2__0");
					put(grammarAccess.getIfElseStatementAccess().getGroup_5(), "rule__IfElseStatement__Group_5__0");
					put(grammarAccess.getIfElseStatementAccess().getGroup_5_2(), "rule__IfElseStatement__Group_5_2__0");
					put(grammarAccess.getIfElseStatementAccess().getGroup_5_2_2(), "rule__IfElseStatement__Group_5_2_2__0");
					put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup_4(), "rule__IfStatement__Group_4__0");
					put(grammarAccess.getIfStatementAccess().getGroup_4_2(), "rule__IfStatement__Group_4_2__0");
					put(grammarAccess.getString0Access().getGroup(), "rule__String0__Group__0");
					put(grammarAccess.getFullAccess().getGroup(), "rule__Full__Group__0");
					put(grammarAccess.getMarkAccess().getGroup(), "rule__Mark__Group__0");
					put(grammarAccess.getAheadAccess().getGroup(), "rule__Ahead__Group__0");
					put(grammarAccess.getHeadingAccess().getGroup(), "rule__Heading__Group__0");
					put(grammarAccess.getNotAccess().getGroup(), "rule__Not__Group__0");
					put(grammarAccess.getRobotAccess().getNameAssignment_2(), "rule__Robot__NameAssignment_2");
					put(grammarAccess.getRobotAccess().getStatementsAssignment_6_0(), "rule__Robot__StatementsAssignment_6_0");
					put(grammarAccess.getRobotAccess().getStatementsAssignment_6_2_0(), "rule__Robot__StatementsAssignment_6_2_0");
					put(grammarAccess.getExpressionAccess().getAAssignment_1(), "rule__Expression__AAssignment_1");
					put(grammarAccess.getExpressionAccess().getBAssignment_2_1(), "rule__Expression__BAssignment_2_1");
					put(grammarAccess.getSingletonAccess().getTypeAssignment(), "rule__Singleton__TypeAssignment");
					put(grammarAccess.getTraceAccess().getTextAssignment_2(), "rule__Trace__TextAssignment_2");
					put(grammarAccess.getBuildWallAccess().getRowAssignment_3(), "rule__BuildWall__RowAssignment_3");
					put(grammarAccess.getBuildWallAccess().getColAssignment_5(), "rule__BuildWall__ColAssignment_5");
					put(grammarAccess.getDropMarkAccess().getRowAssignment_3(), "rule__DropMark__RowAssignment_3");
					put(grammarAccess.getDropMarkAccess().getColAssignment_5(), "rule__DropMark__ColAssignment_5");
					put(grammarAccess.getWhileStatementAccess().getCondAssignment_1(), "rule__WhileStatement__CondAssignment_1");
					put(grammarAccess.getWhileStatementAccess().getBodyAssignment_4_0(), "rule__WhileStatement__BodyAssignment_4_0");
					put(grammarAccess.getWhileStatementAccess().getBodyAssignment_4_2_0(), "rule__WhileStatement__BodyAssignment_4_2_0");
					put(grammarAccess.getRepeatStatementAccess().getTimesAssignment_1(), "rule__RepeatStatement__TimesAssignment_1");
					put(grammarAccess.getRepeatStatementAccess().getBodyAssignment_4_0(), "rule__RepeatStatement__BodyAssignment_4_0");
					put(grammarAccess.getRepeatStatementAccess().getBodyAssignment_4_2_0(), "rule__RepeatStatement__BodyAssignment_4_2_0");
					put(grammarAccess.getIfElseStatementAccess().getCondAssignment_1(), "rule__IfElseStatement__CondAssignment_1");
					put(grammarAccess.getIfElseStatementAccess().getIfbodyAssignment_4_0(), "rule__IfElseStatement__IfbodyAssignment_4_0");
					put(grammarAccess.getIfElseStatementAccess().getIfbodyAssignment_4_2_0(), "rule__IfElseStatement__IfbodyAssignment_4_2_0");
					put(grammarAccess.getIfElseStatementAccess().getElsebodyAssignment_5_2_0(), "rule__IfElseStatement__ElsebodyAssignment_5_2_0");
					put(grammarAccess.getIfElseStatementAccess().getElsebodyAssignment_5_2_2_0(), "rule__IfElseStatement__ElsebodyAssignment_5_2_2_0");
					put(grammarAccess.getIfStatementAccess().getCondAssignment_1(), "rule__IfStatement__CondAssignment_1");
					put(grammarAccess.getIfStatementAccess().getBodyAssignment_4_0(), "rule__IfStatement__BodyAssignment_4_0");
					put(grammarAccess.getIfStatementAccess().getBodyAssignment_4_2_0(), "rule__IfStatement__BodyAssignment_4_2_0");
					put(grammarAccess.getString0Access().getTextAssignment_1(), "rule__String0__TextAssignment_1");
					put(grammarAccess.getHeadingAccess().getWindAssignment_1(), "rule__Heading__WindAssignment_1");
					put(grammarAccess.getNotAccess().getEAssignment_1(), "rule__Not__EAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RobotGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RobotGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
