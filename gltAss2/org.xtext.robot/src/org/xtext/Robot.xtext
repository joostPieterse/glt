// automatically generated by Xtext
grammar org.xtext.Robot with org.eclipse.xtext.common.Terminals 

import "simplerobot"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Robot returns Robot:
	{Robot}
	'Script' name=EString 'runs' 'as' '\n'?
		(statements+=Statement '\n'? ( statements+=Statement '\n'?)*)?
	'end';

Statement returns Statement:
	Comment | Singleton | Trace | BuildWall | DropMark | WhileStatement | RepeatStatement | IfElseStatement ;//| IfStatement;


Atomic returns Atomic:
	Full | Mark | Ahead | Heading | Not;
	
Expression returns Expression:
	{Expression}
	a=Atomic (('and'|'or') b=Expression)?;

EString returns ecore::EString:
	STRING | ID;

terminal COMMENTTEXT 	: '#' !('\n'|'\r')* ('\r'? '\n')?;

Comment returns Comment:
	{Comment}
	COMMENTTEXT;

Singleton returns Singleton:
	type=SingletonTypes;

Trace returns Trace:
	{Trace}
	'trace' text=EString;

BuildWall returns BuildWall:
	'buildWall' 'at' 'row:' row=EInt 'col:' col=EInt;

DropMark returns DropMark:
	'dropMark' 'at' 'row:' row=EInt 'col:' col=EInt;

WhileStatement returns WhileStatement:
	'while' cond=Expression 'do' '\n'?
		(body+=Statement '\n'? ( body+=Statement '\n'?)*)?
	'end';

RepeatStatement returns RepeatStatement:
	'repeat' times=EInt 'times' '\n'?
		(body+=Statement '\n'? ( body+=Statement '\n'?)*)?
	'end';

IfElseStatement returns IfElseStatement:
	'if' cond=Expression 'do' '\n'?
		(ifbody+=Statement '\n'? ( ifbody+=Statement '\n'?)*)?
	('else' '\n'?
		(elsebody+=Statement '\n'?( elsebody+=Statement '\n'?)*)?)?
	'end';

IfStatement returns IfStatement:
	'if' cond=Expression 'do' '\n'?
		(body+=Statement '\n'?( body+=Statement '\n'?)*)?
	'end';

enum SingletonTypes returns SingletonTypes:
				step = 'step' | turnLeft = 'turnLeft' | drop = 'drop' | pick = 'pick';

String0 returns String:
	'"' text=EString '"' ;

EInt returns ecore::EInt:
	INT;

Full returns Full:
	{Full}
	'full';

Mark returns Mark:
	{Mark}
	'mark';

Ahead returns Ahead:
	{Ahead}
	'wall' 'ahead';

Heading returns Heading:
	'heading' wind=Orientation;

Not returns Not:
	'not' e=Atomic;

enum Orientation returns Orientation:
				south = 'south' | north = 'north' | east = 'east' | west = 'west';
