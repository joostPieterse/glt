// automatically generated by Xtext
grammar org.xtext.Robot with org.eclipse.xtext.common.Terminals

import "simplerobot"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Robot returns Robot:
	{Robot}
	'Script' name=EString 'runs as'
		(statements+=Statement ( statements+=Statement)*)?
	'end';

Statement returns Statement:
	Comment | Singleton | Trace | BuildWall | DropMark | WhileStatement | RepeatStatement | IfElseStatement | IfStatement;


Expression returns Expression:
	Full | Mark | Ahead | Heading | And | Not;

EString returns ecore::EString:
	STRING | ID;

Comment returns Comment:
	'#' comment=EString '\n';

Singleton returns Singleton:
	type=SingletonTypes;

Trace returns Trace:
	{Trace}
	'Trace' text=String0;

BuildWall returns BuildWall:
	'buildWall' 'at' 'row:' row=EInt 'col:' col=EInt;

DropMark returns DropMark:
	'dropMark' 'at' 'row:' row=EInt 'col:' col=EInt;

WhileStatement returns WhileStatement:
	'while' cond=Expression 'do'
		(body+=Statement ( body+=Statement)*)?
	'end';

RepeatStatement returns RepeatStatement:
	'repeat' times=EInt 'times' 
		(body+=Statement ( body+=Statement)*)?
	'end';

IfElseStatement returns IfElseStatement:
	'if' cond=Expression 'then'
		(ifbody+=Statement ( ifbody+=Statement)*)?
	'else'
		(elsebody+=Statement ( elsebody+=Statement)*)?
	'end';

IfStatement returns IfStatement:
	'if' cond=Expression 'then'
		(body+=Statement ( body+=Statement)*)?
	'end';

enum SingletonTypes returns SingletonTypes:
				step = 'step' | turnLeft = 'turnLeft' | drop = 'drop' | pick = 'pick';

String0 returns String:
	'"' text=EString '"' ;

EInt returns ecore::EInt:
	INT;

Full returns Full:
	{Full}
	'full';

Mark returns Mark:
	{Mark}
	'mark';

Ahead returns Ahead:
	{Ahead}
	'wall' 'ahead';

Heading returns Heading:
	'heading' wind=Orientation;

And returns And:
	a=Expression 'and' b=Expression;

Not returns Not:
	'not' e=Expression;

enum Orientation returns Orientation:
				south = 'south' | north = 'north' | east = 'east' | west = 'west';
