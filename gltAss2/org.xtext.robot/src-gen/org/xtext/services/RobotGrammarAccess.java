/*
 * generated by Xtext 2.11.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RobotGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Robot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRobotAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cScriptKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNAMETerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRunsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLineFeedKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cStatementsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_6_0_0 = (RuleCall)cStatementsAssignment_6_0.eContents().get(0);
		private final Keyword cLineFeedKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Assignment cStatementsAssignment_6_2_0 = (Assignment)cGroup_6_2.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_6_2_0_0 = (RuleCall)cStatementsAssignment_6_2_0.eContents().get(0);
		private final Keyword cLineFeedKeyword_6_2_1 = (Keyword)cGroup_6_2.eContents().get(1);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Robot:
		//	{Robot}
		//	'Script' name=NAME 'runs' 'as' '\n'? (statements+=Statement '\n'? (statements+=Statement '\n'?)*)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{Robot} 'Script' name=NAME 'runs' 'as' '\n'? (statements+=Statement '\n'? (statements+=Statement '\n'?)*)? 'end'
		public Group getGroup() { return cGroup; }
		
		//{Robot}
		public Action getRobotAction_0() { return cRobotAction_0; }
		
		//'Script'
		public Keyword getScriptKeyword_1() { return cScriptKeyword_1; }
		
		//name=NAME
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_2_0() { return cNameNAMETerminalRuleCall_2_0; }
		
		//'runs'
		public Keyword getRunsKeyword_3() { return cRunsKeyword_3; }
		
		//'as'
		public Keyword getAsKeyword_4() { return cAsKeyword_4; }
		
		//'\n'?
		public Keyword getLineFeedKeyword_5() { return cLineFeedKeyword_5; }
		
		//(statements+=Statement '\n'? (statements+=Statement '\n'?)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//statements+=Statement
		public Assignment getStatementsAssignment_6_0() { return cStatementsAssignment_6_0; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_6_0_0() { return cStatementsStatementParserRuleCall_6_0_0; }
		
		//'\n'?
		public Keyword getLineFeedKeyword_6_1() { return cLineFeedKeyword_6_1; }
		
		//(statements+=Statement '\n'?)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//statements+=Statement
		public Assignment getStatementsAssignment_6_2_0() { return cStatementsAssignment_6_2_0; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_6_2_0_0() { return cStatementsStatementParserRuleCall_6_2_0_0; }
		
		//'\n'?
		public Keyword getLineFeedKeyword_6_2_1() { return cLineFeedKeyword_6_2_1; }
		
		//'end'
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSingletonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTraceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBuildWallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDropMarkParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cWhileStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRepeatStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cIfElseStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Statement:
		//	Comment | Singleton | Trace | BuildWall | DropMark | WhileStatement | RepeatStatement | IfElseStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//Comment | Singleton | Trace | BuildWall | DropMark | WhileStatement | RepeatStatement | IfElseStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Comment
		public RuleCall getCommentParserRuleCall_0() { return cCommentParserRuleCall_0; }
		
		//Singleton
		public RuleCall getSingletonParserRuleCall_1() { return cSingletonParserRuleCall_1; }
		
		//Trace
		public RuleCall getTraceParserRuleCall_2() { return cTraceParserRuleCall_2; }
		
		//BuildWall
		public RuleCall getBuildWallParserRuleCall_3() { return cBuildWallParserRuleCall_3; }
		
		//DropMark
		public RuleCall getDropMarkParserRuleCall_4() { return cDropMarkParserRuleCall_4; }
		
		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_5() { return cWhileStatementParserRuleCall_5; }
		
		//RepeatStatement
		public RuleCall getRepeatStatementParserRuleCall_6() { return cRepeatStatementParserRuleCall_6; }
		
		//IfElseStatement
		public RuleCall getIfElseStatementParserRuleCall_7() { return cIfElseStatementParserRuleCall_7; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFullParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMarkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAheadParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cHeadingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNotParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Atomic:
		//	Full | Mark | Ahead | Heading | Not;
		@Override public ParserRule getRule() { return rule; }
		
		//Full | Mark | Ahead | Heading | Not
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Full
		public RuleCall getFullParserRuleCall_0() { return cFullParserRuleCall_0; }
		
		//Mark
		public RuleCall getMarkParserRuleCall_1() { return cMarkParserRuleCall_1; }
		
		//Ahead
		public RuleCall getAheadParserRuleCall_2() { return cAheadParserRuleCall_2; }
		
		//Heading
		public RuleCall getHeadingParserRuleCall_3() { return cHeadingParserRuleCall_3; }
		
		//Not
		public RuleCall getNotParserRuleCall_4() { return cNotParserRuleCall_4; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAAtomicParserRuleCall_1_0 = (RuleCall)cAAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cAndKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Keyword cOrKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final Assignment cBAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBExpressionParserRuleCall_2_1_0 = (RuleCall)cBAssignment_2_1.eContents().get(0);
		
		//Expression:
		//	{Expression} a=Atomic (('and' | 'or') b=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Expression} a=Atomic (('and' | 'or') b=Expression)?
		public Group getGroup() { return cGroup; }
		
		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }
		
		//a=Atomic
		public Assignment getAAssignment_1() { return cAAssignment_1; }
		
		//Atomic
		public RuleCall getAAtomicParserRuleCall_1_0() { return cAAtomicParserRuleCall_1_0; }
		
		//(('and' | 'or') b=Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'and' | 'or'
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//'and'
		public Keyword getAndKeyword_2_0_0() { return cAndKeyword_2_0_0; }
		
		//'or'
		public Keyword getOrKeyword_2_0_1() { return cOrKeyword_2_0_1; }
		
		//b=Expression
		public Assignment getBAssignment_2_1() { return cBAssignment_2_1; }
		
		//Expression
		public RuleCall getBExpressionParserRuleCall_2_1_0() { return cBExpressionParserRuleCall_2_1_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommentAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cCOMMENTTEXTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Comment:
		//	{Comment} COMMENTTEXT;
		@Override public ParserRule getRule() { return rule; }
		
		//{Comment} COMMENTTEXT
		public Group getGroup() { return cGroup; }
		
		//{Comment}
		public Action getCommentAction_0() { return cCommentAction_0; }
		
		//COMMENTTEXT
		public RuleCall getCOMMENTTEXTTerminalRuleCall_1() { return cCOMMENTTEXTTerminalRuleCall_1; }
	}
	public class SingletonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Singleton");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeSingletonTypesEnumRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//Singleton:
		//	type=SingletonTypes;
		@Override public ParserRule getRule() { return rule; }
		
		//type=SingletonTypes
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//SingletonTypes
		public RuleCall getTypeSingletonTypesEnumRuleCall_0() { return cTypeSingletonTypesEnumRuleCall_0; }
	}
	public class TraceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Trace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTraceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTraceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		
		//Trace:
		//	{Trace}
		//	'trace' text=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{Trace} 'trace' text=STRING
		public Group getGroup() { return cGroup; }
		
		//{Trace}
		public Action getTraceAction_0() { return cTraceAction_0; }
		
		//'trace'
		public Keyword getTraceKeyword_1() { return cTraceKeyword_1; }
		
		//text=STRING
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_0() { return cTextSTRINGTerminalRuleCall_2_0; }
	}
	public class BuildWallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.BuildWall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBuildWallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRowKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRowAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRowPROPERINTTerminalRuleCall_3_0 = (RuleCall)cRowAssignment_3.eContents().get(0);
		private final Keyword cColKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cColPROPERINTTerminalRuleCall_5_0 = (RuleCall)cColAssignment_5.eContents().get(0);
		
		//BuildWall:
		//	'buildWall' 'at' 'row:' row=PROPERINT 'col:' col=PROPERINT;
		@Override public ParserRule getRule() { return rule; }
		
		//'buildWall' 'at' 'row:' row=PROPERINT 'col:' col=PROPERINT
		public Group getGroup() { return cGroup; }
		
		//'buildWall'
		public Keyword getBuildWallKeyword_0() { return cBuildWallKeyword_0; }
		
		//'at'
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }
		
		//'row:'
		public Keyword getRowKeyword_2() { return cRowKeyword_2; }
		
		//row=PROPERINT
		public Assignment getRowAssignment_3() { return cRowAssignment_3; }
		
		//PROPERINT
		public RuleCall getRowPROPERINTTerminalRuleCall_3_0() { return cRowPROPERINTTerminalRuleCall_3_0; }
		
		//'col:'
		public Keyword getColKeyword_4() { return cColKeyword_4; }
		
		//col=PROPERINT
		public Assignment getColAssignment_5() { return cColAssignment_5; }
		
		//PROPERINT
		public RuleCall getColPROPERINTTerminalRuleCall_5_0() { return cColPROPERINTTerminalRuleCall_5_0; }
	}
	public class DropMarkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.DropMark");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDropMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRowKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRowAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRowPROPERINTTerminalRuleCall_3_0 = (RuleCall)cRowAssignment_3.eContents().get(0);
		private final Keyword cColKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cColPROPERINTTerminalRuleCall_5_0 = (RuleCall)cColAssignment_5.eContents().get(0);
		
		//DropMark:
		//	'dropMark' 'at' 'row:' row=PROPERINT 'col:' col=PROPERINT;
		@Override public ParserRule getRule() { return rule; }
		
		//'dropMark' 'at' 'row:' row=PROPERINT 'col:' col=PROPERINT
		public Group getGroup() { return cGroup; }
		
		//'dropMark'
		public Keyword getDropMarkKeyword_0() { return cDropMarkKeyword_0; }
		
		//'at'
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }
		
		//'row:'
		public Keyword getRowKeyword_2() { return cRowKeyword_2; }
		
		//row=PROPERINT
		public Assignment getRowAssignment_3() { return cRowAssignment_3; }
		
		//PROPERINT
		public RuleCall getRowPROPERINTTerminalRuleCall_3_0() { return cRowPROPERINTTerminalRuleCall_3_0; }
		
		//'col:'
		public Keyword getColKeyword_4() { return cColKeyword_4; }
		
		//col=PROPERINT
		public Assignment getColAssignment_5() { return cColAssignment_5; }
		
		//PROPERINT
		public RuleCall getColPROPERINTTerminalRuleCall_5_0() { return cColPROPERINTTerminalRuleCall_5_0; }
	}
	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExpressionParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLineFeedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cBodyStatementParserRuleCall_4_0_0 = (RuleCall)cBodyAssignment_4_0.eContents().get(0);
		private final Keyword cLineFeedKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Assignment cBodyAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cBodyStatementParserRuleCall_4_2_0_0 = (RuleCall)cBodyAssignment_4_2_0.eContents().get(0);
		private final Keyword cLineFeedKeyword_4_2_1 = (Keyword)cGroup_4_2.eContents().get(1);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//WhileStatement:
		//	'while' cond=Expression 'do' '\n'? (body+=Statement '\n'? (body+=Statement '\n'?)*)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' cond=Expression 'do' '\n'? (body+=Statement '\n'? (body+=Statement '\n'?)*)? 'end'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//cond=Expression
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_1_0() { return cCondExpressionParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//'\n'?
		public Keyword getLineFeedKeyword_3() { return cLineFeedKeyword_3; }
		
		//(body+=Statement '\n'? (body+=Statement '\n'?)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//body+=Statement
		public Assignment getBodyAssignment_4_0() { return cBodyAssignment_4_0; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_4_0_0() { return cBodyStatementParserRuleCall_4_0_0; }
		
		//'\n'?
		public Keyword getLineFeedKeyword_4_1() { return cLineFeedKeyword_4_1; }
		
		//(body+=Statement '\n'?)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//body+=Statement
		public Assignment getBodyAssignment_4_2_0() { return cBodyAssignment_4_2_0; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_4_2_0_0() { return cBodyStatementParserRuleCall_4_2_0_0; }
		
		//'\n'?
		public Keyword getLineFeedKeyword_4_2_1() { return cLineFeedKeyword_4_2_1; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class RepeatStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.RepeatStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepeatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimesPROPERINTTerminalRuleCall_1_0 = (RuleCall)cTimesAssignment_1.eContents().get(0);
		private final Keyword cTimesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLineFeedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cBodyStatementParserRuleCall_4_0_0 = (RuleCall)cBodyAssignment_4_0.eContents().get(0);
		private final Keyword cLineFeedKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Assignment cBodyAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cBodyStatementParserRuleCall_4_2_0_0 = (RuleCall)cBodyAssignment_4_2_0.eContents().get(0);
		private final Keyword cLineFeedKeyword_4_2_1 = (Keyword)cGroup_4_2.eContents().get(1);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RepeatStatement:
		//	'repeat' times=PROPERINT 'times' '\n'? (body+=Statement '\n'? (body+=Statement '\n'?)*)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'repeat' times=PROPERINT 'times' '\n'? (body+=Statement '\n'? (body+=Statement '\n'?)*)? 'end'
		public Group getGroup() { return cGroup; }
		
		//'repeat'
		public Keyword getRepeatKeyword_0() { return cRepeatKeyword_0; }
		
		//times=PROPERINT
		public Assignment getTimesAssignment_1() { return cTimesAssignment_1; }
		
		//PROPERINT
		public RuleCall getTimesPROPERINTTerminalRuleCall_1_0() { return cTimesPROPERINTTerminalRuleCall_1_0; }
		
		//'times'
		public Keyword getTimesKeyword_2() { return cTimesKeyword_2; }
		
		//'\n'?
		public Keyword getLineFeedKeyword_3() { return cLineFeedKeyword_3; }
		
		//(body+=Statement '\n'? (body+=Statement '\n'?)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//body+=Statement
		public Assignment getBodyAssignment_4_0() { return cBodyAssignment_4_0; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_4_0_0() { return cBodyStatementParserRuleCall_4_0_0; }
		
		//'\n'?
		public Keyword getLineFeedKeyword_4_1() { return cLineFeedKeyword_4_1; }
		
		//(body+=Statement '\n'?)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//body+=Statement
		public Assignment getBodyAssignment_4_2_0() { return cBodyAssignment_4_2_0; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_4_2_0_0() { return cBodyStatementParserRuleCall_4_2_0_0; }
		
		//'\n'?
		public Keyword getLineFeedKeyword_4_2_1() { return cLineFeedKeyword_4_2_1; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class IfElseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.IfElseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExpressionParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLineFeedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cIfbodyAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cIfbodyStatementParserRuleCall_4_0_0 = (RuleCall)cIfbodyAssignment_4_0.eContents().get(0);
		private final Keyword cLineFeedKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Assignment cIfbodyAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cIfbodyStatementParserRuleCall_4_2_0_0 = (RuleCall)cIfbodyAssignment_4_2_0.eContents().get(0);
		private final Keyword cLineFeedKeyword_4_2_1 = (Keyword)cGroup_4_2.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cDoKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLineFeedKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Assignment cElsebodyAssignment_5_3_0 = (Assignment)cGroup_5_3.eContents().get(0);
		private final RuleCall cElsebodyStatementParserRuleCall_5_3_0_0 = (RuleCall)cElsebodyAssignment_5_3_0.eContents().get(0);
		private final Keyword cLineFeedKeyword_5_3_1 = (Keyword)cGroup_5_3.eContents().get(1);
		private final Group cGroup_5_3_2 = (Group)cGroup_5_3.eContents().get(2);
		private final Assignment cElsebodyAssignment_5_3_2_0 = (Assignment)cGroup_5_3_2.eContents().get(0);
		private final RuleCall cElsebodyStatementParserRuleCall_5_3_2_0_0 = (RuleCall)cElsebodyAssignment_5_3_2_0.eContents().get(0);
		private final Keyword cLineFeedKeyword_5_3_2_1 = (Keyword)cGroup_5_3_2.eContents().get(1);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IfElseStatement:
		//	'if' cond=Expression 'do' '\n'? (ifbody+=Statement '\n'? (ifbody+=Statement '\n'?)*)? ('else' 'do' '\n'?
		//	(elsebody+=Statement '\n'? (elsebody+=Statement '\n'?)*)?)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' cond=Expression 'do' '\n'? (ifbody+=Statement '\n'? (ifbody+=Statement '\n'?)*)? ('else' 'do' '\n'?
		//(elsebody+=Statement '\n'? (elsebody+=Statement '\n'?)*)?)? 'end'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//cond=Expression
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_1_0() { return cCondExpressionParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//'\n'?
		public Keyword getLineFeedKeyword_3() { return cLineFeedKeyword_3; }
		
		//(ifbody+=Statement '\n'? (ifbody+=Statement '\n'?)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//ifbody+=Statement
		public Assignment getIfbodyAssignment_4_0() { return cIfbodyAssignment_4_0; }
		
		//Statement
		public RuleCall getIfbodyStatementParserRuleCall_4_0_0() { return cIfbodyStatementParserRuleCall_4_0_0; }
		
		//'\n'?
		public Keyword getLineFeedKeyword_4_1() { return cLineFeedKeyword_4_1; }
		
		//(ifbody+=Statement '\n'?)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//ifbody+=Statement
		public Assignment getIfbodyAssignment_4_2_0() { return cIfbodyAssignment_4_2_0; }
		
		//Statement
		public RuleCall getIfbodyStatementParserRuleCall_4_2_0_0() { return cIfbodyStatementParserRuleCall_4_2_0_0; }
		
		//'\n'?
		public Keyword getLineFeedKeyword_4_2_1() { return cLineFeedKeyword_4_2_1; }
		
		//('else' 'do' '\n'? (elsebody+=Statement '\n'? (elsebody+=Statement '\n'?)*)?)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//'do'
		public Keyword getDoKeyword_5_1() { return cDoKeyword_5_1; }
		
		//'\n'?
		public Keyword getLineFeedKeyword_5_2() { return cLineFeedKeyword_5_2; }
		
		//(elsebody+=Statement '\n'? (elsebody+=Statement '\n'?)*)?
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//elsebody+=Statement
		public Assignment getElsebodyAssignment_5_3_0() { return cElsebodyAssignment_5_3_0; }
		
		//Statement
		public RuleCall getElsebodyStatementParserRuleCall_5_3_0_0() { return cElsebodyStatementParserRuleCall_5_3_0_0; }
		
		//'\n'?
		public Keyword getLineFeedKeyword_5_3_1() { return cLineFeedKeyword_5_3_1; }
		
		//(elsebody+=Statement '\n'?)*
		public Group getGroup_5_3_2() { return cGroup_5_3_2; }
		
		//elsebody+=Statement
		public Assignment getElsebodyAssignment_5_3_2_0() { return cElsebodyAssignment_5_3_2_0; }
		
		//Statement
		public RuleCall getElsebodyStatementParserRuleCall_5_3_2_0_0() { return cElsebodyStatementParserRuleCall_5_3_2_0_0; }
		
		//'\n'?
		public Keyword getLineFeedKeyword_5_3_2_1() { return cLineFeedKeyword_5_3_2_1; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExpressionParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLineFeedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cBodyStatementParserRuleCall_4_0_0 = (RuleCall)cBodyAssignment_4_0.eContents().get(0);
		private final Keyword cLineFeedKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Assignment cBodyAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cBodyStatementParserRuleCall_4_2_0_0 = (RuleCall)cBodyAssignment_4_2_0.eContents().get(0);
		private final Keyword cLineFeedKeyword_4_2_1 = (Keyword)cGroup_4_2.eContents().get(1);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IfStatement:
		//	'if' cond=Expression 'do' '\n'? (body+=Statement '\n'? (body+=Statement '\n'?)*)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' cond=Expression 'do' '\n'? (body+=Statement '\n'? (body+=Statement '\n'?)*)? 'end'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//cond=Expression
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_1_0() { return cCondExpressionParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//'\n'?
		public Keyword getLineFeedKeyword_3() { return cLineFeedKeyword_3; }
		
		//(body+=Statement '\n'? (body+=Statement '\n'?)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//body+=Statement
		public Assignment getBodyAssignment_4_0() { return cBodyAssignment_4_0; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_4_0_0() { return cBodyStatementParserRuleCall_4_0_0; }
		
		//'\n'?
		public Keyword getLineFeedKeyword_4_1() { return cLineFeedKeyword_4_1; }
		
		//(body+=Statement '\n'?)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//body+=Statement
		public Assignment getBodyAssignment_4_2_0() { return cBodyAssignment_4_2_0; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_4_2_0_0() { return cBodyStatementParserRuleCall_4_2_0_0; }
		
		//'\n'?
		public Keyword getLineFeedKeyword_4_2_1() { return cLineFeedKeyword_4_2_1; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class String0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.String0");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextEStringParserRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//String0 String:
		//	'"' text=EString '"';
		@Override public ParserRule getRule() { return rule; }
		
		//'"' text=EString '"'
		public Group getGroup() { return cGroup; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_0() { return cQuotationMarkKeyword_0; }
		
		//text=EString
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//EString
		public RuleCall getTextEStringParserRuleCall_1_0() { return cTextEStringParserRuleCall_1_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }
	}
	public class FullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Full");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFullAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Full:
		//	{Full}
		//	'full';
		@Override public ParserRule getRule() { return rule; }
		
		//{Full} 'full'
		public Group getGroup() { return cGroup; }
		
		//{Full}
		public Action getFullAction_0() { return cFullAction_0; }
		
		//'full'
		public Keyword getFullKeyword_1() { return cFullKeyword_1; }
	}
	public class MarkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Mark");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMarkAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Mark:
		//	{Mark}
		//	'mark';
		@Override public ParserRule getRule() { return rule; }
		
		//{Mark} 'mark'
		public Group getGroup() { return cGroup; }
		
		//{Mark}
		public Action getMarkAction_0() { return cMarkAction_0; }
		
		//'mark'
		public Keyword getMarkKeyword_1() { return cMarkKeyword_1; }
	}
	public class AheadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Ahead");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAheadAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWallKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAheadKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Ahead:
		//	{Ahead}
		//	'wall' 'ahead';
		@Override public ParserRule getRule() { return rule; }
		
		//{Ahead} 'wall' 'ahead'
		public Group getGroup() { return cGroup; }
		
		//{Ahead}
		public Action getAheadAction_0() { return cAheadAction_0; }
		
		//'wall'
		public Keyword getWallKeyword_1() { return cWallKeyword_1; }
		
		//'ahead'
		public Keyword getAheadKeyword_2() { return cAheadKeyword_2; }
	}
	public class HeadingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Heading");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHeadingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWindOrientationEnumRuleCall_1_0 = (RuleCall)cWindAssignment_1.eContents().get(0);
		
		//Heading:
		//	'heading' wind=Orientation;
		@Override public ParserRule getRule() { return rule; }
		
		//'heading' wind=Orientation
		public Group getGroup() { return cGroup; }
		
		//'heading'
		public Keyword getHeadingKeyword_0() { return cHeadingKeyword_0; }
		
		//wind=Orientation
		public Assignment getWindAssignment_1() { return cWindAssignment_1; }
		
		//Orientation
		public RuleCall getWindOrientationEnumRuleCall_1_0() { return cWindOrientationEnumRuleCall_1_0; }
	}
	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEAtomicParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		
		//Not:
		//	'not' e=Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//'not' e=Atomic
		public Group getGroup() { return cGroup; }
		
		//'not'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//e=Atomic
		public Assignment getEAssignment_1() { return cEAssignment_1; }
		
		//Atomic
		public RuleCall getEAtomicParserRuleCall_1_0() { return cEAtomicParserRuleCall_1_0; }
	}
	
	public class SingletonTypesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.SingletonTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStepEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStepStepKeyword_0_0 = (Keyword)cStepEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTurnLeftEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTurnLeftTurnLeftKeyword_1_0 = (Keyword)cTurnLeftEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDropEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDropDropKeyword_2_0 = (Keyword)cDropEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPickEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPickPickKeyword_3_0 = (Keyword)cPickEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum SingletonTypes:
		//	step | turnLeft | drop | pick;
		public EnumRule getRule() { return rule; }
		
		//step | turnLeft | drop | pick
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//step
		public EnumLiteralDeclaration getStepEnumLiteralDeclaration_0() { return cStepEnumLiteralDeclaration_0; }
		
		//'step'
		public Keyword getStepStepKeyword_0_0() { return cStepStepKeyword_0_0; }
		
		//turnLeft
		public EnumLiteralDeclaration getTurnLeftEnumLiteralDeclaration_1() { return cTurnLeftEnumLiteralDeclaration_1; }
		
		//'turnLeft'
		public Keyword getTurnLeftTurnLeftKeyword_1_0() { return cTurnLeftTurnLeftKeyword_1_0; }
		
		//drop
		public EnumLiteralDeclaration getDropEnumLiteralDeclaration_2() { return cDropEnumLiteralDeclaration_2; }
		
		//'drop'
		public Keyword getDropDropKeyword_2_0() { return cDropDropKeyword_2_0; }
		
		//pick
		public EnumLiteralDeclaration getPickEnumLiteralDeclaration_3() { return cPickEnumLiteralDeclaration_3; }
		
		//'pick'
		public Keyword getPickPickKeyword_3_0() { return cPickPickKeyword_3_0; }
	}
	public class OrientationElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Orientation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSouthEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSouthSouthKeyword_0_0 = (Keyword)cSouthEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNorthEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNorthNorthKeyword_1_0 = (Keyword)cNorthEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEastEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEastEastKeyword_2_0 = (Keyword)cEastEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cWestEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cWestWestKeyword_3_0 = (Keyword)cWestEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Orientation:
		//	south | north | east | west;
		public EnumRule getRule() { return rule; }
		
		//south | north | east | west
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//south
		public EnumLiteralDeclaration getSouthEnumLiteralDeclaration_0() { return cSouthEnumLiteralDeclaration_0; }
		
		//'south'
		public Keyword getSouthSouthKeyword_0_0() { return cSouthSouthKeyword_0_0; }
		
		//north
		public EnumLiteralDeclaration getNorthEnumLiteralDeclaration_1() { return cNorthEnumLiteralDeclaration_1; }
		
		//'north'
		public Keyword getNorthNorthKeyword_1_0() { return cNorthNorthKeyword_1_0; }
		
		//east
		public EnumLiteralDeclaration getEastEnumLiteralDeclaration_2() { return cEastEnumLiteralDeclaration_2; }
		
		//'east'
		public Keyword getEastEastKeyword_2_0() { return cEastEastKeyword_2_0; }
		
		//west
		public EnumLiteralDeclaration getWestEnumLiteralDeclaration_3() { return cWestEnumLiteralDeclaration_3; }
		
		//'west'
		public Keyword getWestWestKeyword_3_0() { return cWestWestKeyword_3_0; }
	}
	
	private final RobotElements pRobot;
	private final StatementElements pStatement;
	private final TerminalRule tNAME;
	private final AtomicElements pAtomic;
	private final ExpressionElements pExpression;
	private final EStringElements pEString;
	private final TerminalRule tCOMMENTTEXT;
	private final CommentElements pComment;
	private final SingletonElements pSingleton;
	private final TraceElements pTrace;
	private final BuildWallElements pBuildWall;
	private final DropMarkElements pDropMark;
	private final WhileStatementElements pWhileStatement;
	private final RepeatStatementElements pRepeatStatement;
	private final IfElseStatementElements pIfElseStatement;
	private final IfStatementElements pIfStatement;
	private final SingletonTypesElements eSingletonTypes;
	private final String0Elements pString0;
	private final TerminalRule tPROPERINT;
	private final FullElements pFull;
	private final MarkElements pMark;
	private final AheadElements pAhead;
	private final HeadingElements pHeading;
	private final NotElements pNot;
	private final OrientationElements eOrientation;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RobotGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRobot = new RobotElements();
		this.pStatement = new StatementElements();
		this.tNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.NAME");
		this.pAtomic = new AtomicElements();
		this.pExpression = new ExpressionElements();
		this.pEString = new EStringElements();
		this.tCOMMENTTEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.COMMENTTEXT");
		this.pComment = new CommentElements();
		this.pSingleton = new SingletonElements();
		this.pTrace = new TraceElements();
		this.pBuildWall = new BuildWallElements();
		this.pDropMark = new DropMarkElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pRepeatStatement = new RepeatStatementElements();
		this.pIfElseStatement = new IfElseStatementElements();
		this.pIfStatement = new IfStatementElements();
		this.eSingletonTypes = new SingletonTypesElements();
		this.pString0 = new String0Elements();
		this.tPROPERINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.PROPERINT");
		this.pFull = new FullElements();
		this.pMark = new MarkElements();
		this.pAhead = new AheadElements();
		this.pHeading = new HeadingElements();
		this.pNot = new NotElements();
		this.eOrientation = new OrientationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Robot".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Robot:
	//	{Robot}
	//	'Script' name=NAME 'runs' 'as' '\n'? (statements+=Statement '\n'? (statements+=Statement '\n'?)*)?
	//	'end';
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	//Statement:
	//	Comment | Singleton | Trace | BuildWall | DropMark | WhileStatement | RepeatStatement | IfElseStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//terminal NAME:
	//	'a'..'z' | 'A'..'Z'+;
	public TerminalRule getNAMERule() {
		return tNAME;
	}
	
	//Atomic:
	//	Full | Mark | Ahead | Heading | Not;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//Expression:
	//	{Expression} a=Atomic (('and' | 'or') b=Expression)?;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal COMMENTTEXT:
	//	'#' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getCOMMENTTEXTRule() {
		return tCOMMENTTEXT;
	}
	
	//Comment:
	//	{Comment} COMMENTTEXT;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//Singleton:
	//	type=SingletonTypes;
	public SingletonElements getSingletonAccess() {
		return pSingleton;
	}
	
	public ParserRule getSingletonRule() {
		return getSingletonAccess().getRule();
	}
	
	//Trace:
	//	{Trace}
	//	'trace' text=STRING;
	public TraceElements getTraceAccess() {
		return pTrace;
	}
	
	public ParserRule getTraceRule() {
		return getTraceAccess().getRule();
	}
	
	//BuildWall:
	//	'buildWall' 'at' 'row:' row=PROPERINT 'col:' col=PROPERINT;
	public BuildWallElements getBuildWallAccess() {
		return pBuildWall;
	}
	
	public ParserRule getBuildWallRule() {
		return getBuildWallAccess().getRule();
	}
	
	//DropMark:
	//	'dropMark' 'at' 'row:' row=PROPERINT 'col:' col=PROPERINT;
	public DropMarkElements getDropMarkAccess() {
		return pDropMark;
	}
	
	public ParserRule getDropMarkRule() {
		return getDropMarkAccess().getRule();
	}
	
	//WhileStatement:
	//	'while' cond=Expression 'do' '\n'? (body+=Statement '\n'? (body+=Statement '\n'?)*)?
	//	'end';
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}
	
	//RepeatStatement:
	//	'repeat' times=PROPERINT 'times' '\n'? (body+=Statement '\n'? (body+=Statement '\n'?)*)?
	//	'end';
	public RepeatStatementElements getRepeatStatementAccess() {
		return pRepeatStatement;
	}
	
	public ParserRule getRepeatStatementRule() {
		return getRepeatStatementAccess().getRule();
	}
	
	//IfElseStatement:
	//	'if' cond=Expression 'do' '\n'? (ifbody+=Statement '\n'? (ifbody+=Statement '\n'?)*)? ('else' 'do' '\n'?
	//	(elsebody+=Statement '\n'? (elsebody+=Statement '\n'?)*)?)?
	//	'end';
	public IfElseStatementElements getIfElseStatementAccess() {
		return pIfElseStatement;
	}
	
	public ParserRule getIfElseStatementRule() {
		return getIfElseStatementAccess().getRule();
	}
	
	//IfStatement:
	//	'if' cond=Expression 'do' '\n'? (body+=Statement '\n'? (body+=Statement '\n'?)*)?
	//	'end';
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//enum SingletonTypes:
	//	step | turnLeft | drop | pick;
	public SingletonTypesElements getSingletonTypesAccess() {
		return eSingletonTypes;
	}
	
	public EnumRule getSingletonTypesRule() {
		return getSingletonTypesAccess().getRule();
	}
	
	//String0 String:
	//	'"' text=EString '"';
	public String0Elements getString0Access() {
		return pString0;
	}
	
	public ParserRule getString0Rule() {
		return getString0Access().getRule();
	}
	
	//terminal PROPERINT returns ecore::EInt:
	//	'0' | '1'..'9' '0'..'9'*;
	public TerminalRule getPROPERINTRule() {
		return tPROPERINT;
	}
	
	//Full:
	//	{Full}
	//	'full';
	public FullElements getFullAccess() {
		return pFull;
	}
	
	public ParserRule getFullRule() {
		return getFullAccess().getRule();
	}
	
	//Mark:
	//	{Mark}
	//	'mark';
	public MarkElements getMarkAccess() {
		return pMark;
	}
	
	public ParserRule getMarkRule() {
		return getMarkAccess().getRule();
	}
	
	//Ahead:
	//	{Ahead}
	//	'wall' 'ahead';
	public AheadElements getAheadAccess() {
		return pAhead;
	}
	
	public ParserRule getAheadRule() {
		return getAheadAccess().getRule();
	}
	
	//Heading:
	//	'heading' wind=Orientation;
	public HeadingElements getHeadingAccess() {
		return pHeading;
	}
	
	public ParserRule getHeadingRule() {
		return getHeadingAccess().getRule();
	}
	
	//Not:
	//	'not' e=Atomic;
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}
	
	//enum Orientation:
	//	south | north | east | west;
	public OrientationElements getOrientationAccess() {
		return eOrientation;
	}
	
	public EnumRule getOrientationRule() {
		return getOrientationAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
