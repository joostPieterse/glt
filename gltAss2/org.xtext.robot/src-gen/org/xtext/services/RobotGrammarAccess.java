/*
 * generated by Xtext 2.11.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RobotGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Robot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRobotAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRobotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cStatementsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cStatementsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_4_2_0 = (RuleCall)cStatementsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cStatementsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_4_3_1_0 = (RuleCall)cStatementsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Robot:
		//	{Robot}
		//	'Robot'
		//	name=EString
		//	'{' ('statements' '{' statements+=Statement ("," statements+=Statement)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Robot} 'Robot' name=EString '{' ('statements' '{' statements+=Statement ("," statements+=Statement)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//{Robot}
		public Action getRobotAction_0() { return cRobotAction_0; }
		
		//'Robot'
		public Keyword getRobotKeyword_1() { return cRobotKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('statements' '{' statements+=Statement ("," statements+=Statement)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'statements'
		public Keyword getStatementsKeyword_4_0() { return cStatementsKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//statements+=Statement
		public Assignment getStatementsAssignment_4_2() { return cStatementsAssignment_4_2; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_2_0() { return cStatementsStatementParserRuleCall_4_2_0; }
		
		//("," statements+=Statement)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//statements+=Statement
		public Assignment getStatementsAssignment_4_3_1() { return cStatementsAssignment_4_3_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_3_1_0() { return cStatementsStatementParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSingletonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTraceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBuildWallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDropMarkParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cWhileStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRepeatStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cIfElseStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cIfStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Statement:
		//	Comment | Singleton | Trace | BuildWall | DropMark | WhileStatement | RepeatStatement | IfElseStatement | IfStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//Comment | Singleton | Trace | BuildWall | DropMark | WhileStatement | RepeatStatement | IfElseStatement | IfStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Comment
		public RuleCall getCommentParserRuleCall_0() { return cCommentParserRuleCall_0; }
		
		//Singleton
		public RuleCall getSingletonParserRuleCall_1() { return cSingletonParserRuleCall_1; }
		
		//Trace
		public RuleCall getTraceParserRuleCall_2() { return cTraceParserRuleCall_2; }
		
		//BuildWall
		public RuleCall getBuildWallParserRuleCall_3() { return cBuildWallParserRuleCall_3; }
		
		//DropMark
		public RuleCall getDropMarkParserRuleCall_4() { return cDropMarkParserRuleCall_4; }
		
		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_5() { return cWhileStatementParserRuleCall_5; }
		
		//RepeatStatement
		public RuleCall getRepeatStatementParserRuleCall_6() { return cRepeatStatementParserRuleCall_6; }
		
		//IfElseStatement
		public RuleCall getIfElseStatementParserRuleCall_7() { return cIfElseStatementParserRuleCall_7; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_8() { return cIfStatementParserRuleCall_8; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFullParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMarkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAheadParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cHeadingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAndParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNotParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Expression:
		//	Full | Mark | Ahead | Heading | And | Not;
		@Override public ParserRule getRule() { return rule; }
		
		//Full | Mark | Ahead | Heading | And | Not
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Full
		public RuleCall getFullParserRuleCall_0() { return cFullParserRuleCall_0; }
		
		//Mark
		public RuleCall getMarkParserRuleCall_1() { return cMarkParserRuleCall_1; }
		
		//Ahead
		public RuleCall getAheadParserRuleCall_2() { return cAheadParserRuleCall_2; }
		
		//Heading
		public RuleCall getHeadingParserRuleCall_3() { return cHeadingParserRuleCall_3; }
		
		//And
		public RuleCall getAndParserRuleCall_4() { return cAndParserRuleCall_4; }
		
		//Not
		public RuleCall getNotParserRuleCall_5() { return cNotParserRuleCall_5; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCommentKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommentEStringParserRuleCall_3_0 = (RuleCall)cCommentAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Comment:
		//	'Comment'
		//	'{'
		//	'comment' comment=EString
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Comment' '{' 'comment' comment=EString '}'
		public Group getGroup() { return cGroup; }
		
		//'Comment'
		public Keyword getCommentKeyword_0() { return cCommentKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'comment'
		public Keyword getCommentKeyword_2() { return cCommentKeyword_2; }
		
		//comment=EString
		public Assignment getCommentAssignment_3() { return cCommentAssignment_3; }
		
		//EString
		public RuleCall getCommentEStringParserRuleCall_3_0() { return cCommentEStringParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SingletonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Singleton");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSingletonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeSingletonTypesEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Singleton:
		//	'Singleton'
		//	'{'
		//	'type' type=SingletonTypes
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Singleton' '{' 'type' type=SingletonTypes '}'
		public Group getGroup() { return cGroup; }
		
		//'Singleton'
		public Keyword getSingletonKeyword_0() { return cSingletonKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//type=SingletonTypes
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//SingletonTypes
		public RuleCall getTypeSingletonTypesEnumRuleCall_3_0() { return cTypeSingletonTypesEnumRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TraceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Trace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTraceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTraceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTextKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTextAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTextString0ParserRuleCall_3_1_0 = (RuleCall)cTextAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Trace:
		//	{Trace}
		//	'Trace'
		//	'{' ('text' text=String0)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Trace} 'Trace' '{' ('text' text=String0)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Trace}
		public Action getTraceAction_0() { return cTraceAction_0; }
		
		//'Trace'
		public Keyword getTraceKeyword_1() { return cTraceKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('text' text=String0)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'text'
		public Keyword getTextKeyword_3_0() { return cTextKeyword_3_0; }
		
		//text=String0
		public Assignment getTextAssignment_3_1() { return cTextAssignment_3_1; }
		
		//String0
		public RuleCall getTextString0ParserRuleCall_3_1_0() { return cTextString0ParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BuildWallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.BuildWall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBuildWallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRowKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRowAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRowEIntParserRuleCall_3_0 = (RuleCall)cRowAssignment_3.eContents().get(0);
		private final Keyword cColKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cColEIntParserRuleCall_5_0 = (RuleCall)cColAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BuildWall:
		//	'BuildWall'
		//	'{'
		//	'row' row=EInt
		//	'col' col=EInt
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'BuildWall' '{' 'row' row=EInt 'col' col=EInt '}'
		public Group getGroup() { return cGroup; }
		
		//'BuildWall'
		public Keyword getBuildWallKeyword_0() { return cBuildWallKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'row'
		public Keyword getRowKeyword_2() { return cRowKeyword_2; }
		
		//row=EInt
		public Assignment getRowAssignment_3() { return cRowAssignment_3; }
		
		//EInt
		public RuleCall getRowEIntParserRuleCall_3_0() { return cRowEIntParserRuleCall_3_0; }
		
		//'col'
		public Keyword getColKeyword_4() { return cColKeyword_4; }
		
		//col=EInt
		public Assignment getColAssignment_5() { return cColAssignment_5; }
		
		//EInt
		public RuleCall getColEIntParserRuleCall_5_0() { return cColEIntParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class DropMarkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.DropMark");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDropMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRowKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRowAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRowEIntParserRuleCall_3_0 = (RuleCall)cRowAssignment_3.eContents().get(0);
		private final Keyword cColKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cColEIntParserRuleCall_5_0 = (RuleCall)cColAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DropMark:
		//	'DropMark'
		//	'{'
		//	'row' row=EInt
		//	'col' col=EInt
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DropMark' '{' 'row' row=EInt 'col' col=EInt '}'
		public Group getGroup() { return cGroup; }
		
		//'DropMark'
		public Keyword getDropMarkKeyword_0() { return cDropMarkKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'row'
		public Keyword getRowKeyword_2() { return cRowKeyword_2; }
		
		//row=EInt
		public Assignment getRowAssignment_3() { return cRowAssignment_3; }
		
		//EInt
		public RuleCall getRowEIntParserRuleCall_3_0() { return cRowEIntParserRuleCall_3_0; }
		
		//'col'
		public Keyword getColKeyword_4() { return cColKeyword_4; }
		
		//col=EInt
		public Assignment getColAssignment_5() { return cColAssignment_5; }
		
		//EInt
		public RuleCall getColEIntParserRuleCall_5_0() { return cColEIntParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileStatementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCondKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCondAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCondExpressionParserRuleCall_3_0 = (RuleCall)cCondAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cBodyKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cBodyAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cBodyStatementParserRuleCall_4_2_0 = (RuleCall)cBodyAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cBodyAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cBodyStatementParserRuleCall_4_3_1_0 = (RuleCall)cBodyAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//WhileStatement:
		//	'WhileStatement'
		//	'{'
		//	'cond' cond=Expression ('body' '{' body+=Statement ("," body+=Statement)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'WhileStatement' '{' 'cond' cond=Expression ('body' '{' body+=Statement ("," body+=Statement)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//'WhileStatement'
		public Keyword getWhileStatementKeyword_0() { return cWhileStatementKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'cond'
		public Keyword getCondKeyword_2() { return cCondKeyword_2; }
		
		//cond=Expression
		public Assignment getCondAssignment_3() { return cCondAssignment_3; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_3_0() { return cCondExpressionParserRuleCall_3_0; }
		
		//('body' '{' body+=Statement ("," body+=Statement)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'body'
		public Keyword getBodyKeyword_4_0() { return cBodyKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//body+=Statement
		public Assignment getBodyAssignment_4_2() { return cBodyAssignment_4_2; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_4_2_0() { return cBodyStatementParserRuleCall_4_2_0; }
		
		//("," body+=Statement)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//body+=Statement
		public Assignment getBodyAssignment_4_3_1() { return cBodyAssignment_4_3_1; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_4_3_1_0() { return cBodyStatementParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class RepeatStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.RepeatStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepeatStatementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTimesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTimesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTimesEIntParserRuleCall_3_0 = (RuleCall)cTimesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cBodyKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cBodyAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cBodyStatementParserRuleCall_4_2_0 = (RuleCall)cBodyAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cBodyAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cBodyStatementParserRuleCall_4_3_1_0 = (RuleCall)cBodyAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RepeatStatement:
		//	'RepeatStatement'
		//	'{'
		//	'times' times=EInt ('body' '{' body+=Statement ("," body+=Statement)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'RepeatStatement' '{' 'times' times=EInt ('body' '{' body+=Statement ("," body+=Statement)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//'RepeatStatement'
		public Keyword getRepeatStatementKeyword_0() { return cRepeatStatementKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'times'
		public Keyword getTimesKeyword_2() { return cTimesKeyword_2; }
		
		//times=EInt
		public Assignment getTimesAssignment_3() { return cTimesAssignment_3; }
		
		//EInt
		public RuleCall getTimesEIntParserRuleCall_3_0() { return cTimesEIntParserRuleCall_3_0; }
		
		//('body' '{' body+=Statement ("," body+=Statement)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'body'
		public Keyword getBodyKeyword_4_0() { return cBodyKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//body+=Statement
		public Assignment getBodyAssignment_4_2() { return cBodyAssignment_4_2; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_4_2_0() { return cBodyStatementParserRuleCall_4_2_0; }
		
		//("," body+=Statement)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//body+=Statement
		public Assignment getBodyAssignment_4_3_1() { return cBodyAssignment_4_3_1; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_4_3_1_0() { return cBodyStatementParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class IfElseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.IfElseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfElseStatementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCondKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCondAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCondExpressionParserRuleCall_3_0 = (RuleCall)cCondAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cIfbodyKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cIfbodyAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cIfbodyStatementParserRuleCall_4_2_0 = (RuleCall)cIfbodyAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cIfbodyAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cIfbodyStatementParserRuleCall_4_3_1_0 = (RuleCall)cIfbodyAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElsebodyKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cElsebodyAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cElsebodyStatementParserRuleCall_5_2_0 = (RuleCall)cElsebodyAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cElsebodyAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cElsebodyStatementParserRuleCall_5_3_1_0 = (RuleCall)cElsebodyAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IfElseStatement:
		//	'IfElseStatement'
		//	'{'
		//	'cond' cond=Expression ('ifbody' '{' ifbody+=Statement ("," ifbody+=Statement)* '}')? ('elsebody' '{'
		//	elsebody+=Statement ("," elsebody+=Statement)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'IfElseStatement' '{' 'cond' cond=Expression ('ifbody' '{' ifbody+=Statement ("," ifbody+=Statement)* '}')? ('elsebody'
		//'{' elsebody+=Statement ("," elsebody+=Statement)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//'IfElseStatement'
		public Keyword getIfElseStatementKeyword_0() { return cIfElseStatementKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'cond'
		public Keyword getCondKeyword_2() { return cCondKeyword_2; }
		
		//cond=Expression
		public Assignment getCondAssignment_3() { return cCondAssignment_3; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_3_0() { return cCondExpressionParserRuleCall_3_0; }
		
		//('ifbody' '{' ifbody+=Statement ("," ifbody+=Statement)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'ifbody'
		public Keyword getIfbodyKeyword_4_0() { return cIfbodyKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//ifbody+=Statement
		public Assignment getIfbodyAssignment_4_2() { return cIfbodyAssignment_4_2; }
		
		//Statement
		public RuleCall getIfbodyStatementParserRuleCall_4_2_0() { return cIfbodyStatementParserRuleCall_4_2_0; }
		
		//("," ifbody+=Statement)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//ifbody+=Statement
		public Assignment getIfbodyAssignment_4_3_1() { return cIfbodyAssignment_4_3_1; }
		
		//Statement
		public RuleCall getIfbodyStatementParserRuleCall_4_3_1_0() { return cIfbodyStatementParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//('elsebody' '{' elsebody+=Statement ("," elsebody+=Statement)* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'elsebody'
		public Keyword getElsebodyKeyword_5_0() { return cElsebodyKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//elsebody+=Statement
		public Assignment getElsebodyAssignment_5_2() { return cElsebodyAssignment_5_2; }
		
		//Statement
		public RuleCall getElsebodyStatementParserRuleCall_5_2_0() { return cElsebodyStatementParserRuleCall_5_2_0; }
		
		//("," elsebody+=Statement)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//elsebody+=Statement
		public Assignment getElsebodyAssignment_5_3_1() { return cElsebodyAssignment_5_3_1; }
		
		//Statement
		public RuleCall getElsebodyStatementParserRuleCall_5_3_1_0() { return cElsebodyStatementParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfStatementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCondKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCondAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCondExpressionParserRuleCall_3_0 = (RuleCall)cCondAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cBodyKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cBodyAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cBodyStatementParserRuleCall_4_2_0 = (RuleCall)cBodyAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cBodyAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cBodyStatementParserRuleCall_4_3_1_0 = (RuleCall)cBodyAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IfStatement:
		//	'IfStatement'
		//	'{'
		//	'cond' cond=Expression ('body' '{' body+=Statement ("," body+=Statement)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'IfStatement' '{' 'cond' cond=Expression ('body' '{' body+=Statement ("," body+=Statement)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//'IfStatement'
		public Keyword getIfStatementKeyword_0() { return cIfStatementKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'cond'
		public Keyword getCondKeyword_2() { return cCondKeyword_2; }
		
		//cond=Expression
		public Assignment getCondAssignment_3() { return cCondAssignment_3; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_3_0() { return cCondExpressionParserRuleCall_3_0; }
		
		//('body' '{' body+=Statement ("," body+=Statement)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'body'
		public Keyword getBodyKeyword_4_0() { return cBodyKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//body+=Statement
		public Assignment getBodyAssignment_4_2() { return cBodyAssignment_4_2; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_4_2_0() { return cBodyStatementParserRuleCall_4_2_0; }
		
		//("," body+=Statement)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//body+=Statement
		public Assignment getBodyAssignment_4_3_1() { return cBodyAssignment_4_3_1; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_4_3_1_0() { return cBodyStatementParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class String0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.String0");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTextKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextEStringParserRuleCall_3_0 = (RuleCall)cTextAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//String0 String:
		//	'String'
		//	'{'
		//	'text' text=EString
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'String' '{' 'text' text=EString '}'
		public Group getGroup() { return cGroup; }
		
		//'String'
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'text'
		public Keyword getTextKeyword_2() { return cTextKeyword_2; }
		
		//text=EString
		public Assignment getTextAssignment_3() { return cTextAssignment_3; }
		
		//EString
		public RuleCall getTextEStringParserRuleCall_3_0() { return cTextEStringParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class FullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Full");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFullAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Full:
		//	{Full}
		//	'Full';
		@Override public ParserRule getRule() { return rule; }
		
		//{Full} 'Full'
		public Group getGroup() { return cGroup; }
		
		//{Full}
		public Action getFullAction_0() { return cFullAction_0; }
		
		//'Full'
		public Keyword getFullKeyword_1() { return cFullKeyword_1; }
	}
	public class MarkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Mark");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMarkAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Mark:
		//	{Mark}
		//	'Mark';
		@Override public ParserRule getRule() { return rule; }
		
		//{Mark} 'Mark'
		public Group getGroup() { return cGroup; }
		
		//{Mark}
		public Action getMarkAction_0() { return cMarkAction_0; }
		
		//'Mark'
		public Keyword getMarkKeyword_1() { return cMarkKeyword_1; }
	}
	public class AheadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Ahead");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAheadAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAheadKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Ahead:
		//	{Ahead}
		//	'Ahead';
		@Override public ParserRule getRule() { return rule; }
		
		//{Ahead} 'Ahead'
		public Group getGroup() { return cGroup; }
		
		//{Ahead}
		public Action getAheadAction_0() { return cAheadAction_0; }
		
		//'Ahead'
		public Keyword getAheadKeyword_1() { return cAheadKeyword_1; }
	}
	public class HeadingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Heading");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHeadingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cWindKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cWindAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWindOrientationEnumRuleCall_3_0 = (RuleCall)cWindAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Heading:
		//	'Heading'
		//	'{'
		//	'wind' wind=Orientation
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Heading' '{' 'wind' wind=Orientation '}'
		public Group getGroup() { return cGroup; }
		
		//'Heading'
		public Keyword getHeadingKeyword_0() { return cHeadingKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'wind'
		public Keyword getWindKeyword_2() { return cWindKeyword_2; }
		
		//wind=Orientation
		public Assignment getWindAssignment_3() { return cWindAssignment_3; }
		
		//Orientation
		public RuleCall getWindOrientationEnumRuleCall_3_0() { return cWindOrientationEnumRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAExpressionParserRuleCall_3_0 = (RuleCall)cAAssignment_3.eContents().get(0);
		private final Keyword cBKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBExpressionParserRuleCall_5_0 = (RuleCall)cBAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//And:
		//	'And'
		//	'{'
		//	'a' a=Expression
		//	'b' b=Expression
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'And' '{' 'a' a=Expression 'b' b=Expression '}'
		public Group getGroup() { return cGroup; }
		
		//'And'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'a'
		public Keyword getAKeyword_2() { return cAKeyword_2; }
		
		//a=Expression
		public Assignment getAAssignment_3() { return cAAssignment_3; }
		
		//Expression
		public RuleCall getAExpressionParserRuleCall_3_0() { return cAExpressionParserRuleCall_3_0; }
		
		//'b'
		public Keyword getBKeyword_4() { return cBKeyword_4; }
		
		//b=Expression
		public Assignment getBAssignment_5() { return cBAssignment_5; }
		
		//Expression
		public RuleCall getBExpressionParserRuleCall_5_0() { return cBExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEExpressionParserRuleCall_3_0 = (RuleCall)cEAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Not:
		//	'Not'
		//	'{'
		//	'e' e=Expression
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Not' '{' 'e' e=Expression '}'
		public Group getGroup() { return cGroup; }
		
		//'Not'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'e'
		public Keyword getEKeyword_2() { return cEKeyword_2; }
		
		//e=Expression
		public Assignment getEAssignment_3() { return cEAssignment_3; }
		
		//Expression
		public RuleCall getEExpressionParserRuleCall_3_0() { return cEExpressionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	public class SingletonTypesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.SingletonTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStepEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStepStepKeyword_0_0 = (Keyword)cStepEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTurnLeftEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTurnLeftTurnLeftKeyword_1_0 = (Keyword)cTurnLeftEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDropEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDropDropKeyword_2_0 = (Keyword)cDropEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPickEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPickPickKeyword_3_0 = (Keyword)cPickEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum SingletonTypes:
		//	step | turnLeft | drop | pick;
		public EnumRule getRule() { return rule; }
		
		//step | turnLeft | drop | pick
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//step
		public EnumLiteralDeclaration getStepEnumLiteralDeclaration_0() { return cStepEnumLiteralDeclaration_0; }
		
		//'step'
		public Keyword getStepStepKeyword_0_0() { return cStepStepKeyword_0_0; }
		
		//turnLeft
		public EnumLiteralDeclaration getTurnLeftEnumLiteralDeclaration_1() { return cTurnLeftEnumLiteralDeclaration_1; }
		
		//'turnLeft'
		public Keyword getTurnLeftTurnLeftKeyword_1_0() { return cTurnLeftTurnLeftKeyword_1_0; }
		
		//drop
		public EnumLiteralDeclaration getDropEnumLiteralDeclaration_2() { return cDropEnumLiteralDeclaration_2; }
		
		//'drop'
		public Keyword getDropDropKeyword_2_0() { return cDropDropKeyword_2_0; }
		
		//pick
		public EnumLiteralDeclaration getPickEnumLiteralDeclaration_3() { return cPickEnumLiteralDeclaration_3; }
		
		//'pick'
		public Keyword getPickPickKeyword_3_0() { return cPickPickKeyword_3_0; }
	}
	public class OrientationElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Robot.Orientation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSouthEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSouthSouthKeyword_0_0 = (Keyword)cSouthEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNorthEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNorthNorthKeyword_1_0 = (Keyword)cNorthEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEastEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEastEastKeyword_2_0 = (Keyword)cEastEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cWestEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cWestWestKeyword_3_0 = (Keyword)cWestEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Orientation:
		//	south | north | east | west;
		public EnumRule getRule() { return rule; }
		
		//south | north | east | west
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//south
		public EnumLiteralDeclaration getSouthEnumLiteralDeclaration_0() { return cSouthEnumLiteralDeclaration_0; }
		
		//'south'
		public Keyword getSouthSouthKeyword_0_0() { return cSouthSouthKeyword_0_0; }
		
		//north
		public EnumLiteralDeclaration getNorthEnumLiteralDeclaration_1() { return cNorthEnumLiteralDeclaration_1; }
		
		//'north'
		public Keyword getNorthNorthKeyword_1_0() { return cNorthNorthKeyword_1_0; }
		
		//east
		public EnumLiteralDeclaration getEastEnumLiteralDeclaration_2() { return cEastEnumLiteralDeclaration_2; }
		
		//'east'
		public Keyword getEastEastKeyword_2_0() { return cEastEastKeyword_2_0; }
		
		//west
		public EnumLiteralDeclaration getWestEnumLiteralDeclaration_3() { return cWestEnumLiteralDeclaration_3; }
		
		//'west'
		public Keyword getWestWestKeyword_3_0() { return cWestWestKeyword_3_0; }
	}
	
	private final RobotElements pRobot;
	private final StatementElements pStatement;
	private final ExpressionElements pExpression;
	private final EStringElements pEString;
	private final CommentElements pComment;
	private final SingletonElements pSingleton;
	private final TraceElements pTrace;
	private final BuildWallElements pBuildWall;
	private final DropMarkElements pDropMark;
	private final WhileStatementElements pWhileStatement;
	private final RepeatStatementElements pRepeatStatement;
	private final IfElseStatementElements pIfElseStatement;
	private final IfStatementElements pIfStatement;
	private final SingletonTypesElements eSingletonTypes;
	private final String0Elements pString0;
	private final EIntElements pEInt;
	private final FullElements pFull;
	private final MarkElements pMark;
	private final AheadElements pAhead;
	private final HeadingElements pHeading;
	private final AndElements pAnd;
	private final NotElements pNot;
	private final OrientationElements eOrientation;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RobotGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRobot = new RobotElements();
		this.pStatement = new StatementElements();
		this.pExpression = new ExpressionElements();
		this.pEString = new EStringElements();
		this.pComment = new CommentElements();
		this.pSingleton = new SingletonElements();
		this.pTrace = new TraceElements();
		this.pBuildWall = new BuildWallElements();
		this.pDropMark = new DropMarkElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pRepeatStatement = new RepeatStatementElements();
		this.pIfElseStatement = new IfElseStatementElements();
		this.pIfStatement = new IfStatementElements();
		this.eSingletonTypes = new SingletonTypesElements();
		this.pString0 = new String0Elements();
		this.pEInt = new EIntElements();
		this.pFull = new FullElements();
		this.pMark = new MarkElements();
		this.pAhead = new AheadElements();
		this.pHeading = new HeadingElements();
		this.pAnd = new AndElements();
		this.pNot = new NotElements();
		this.eOrientation = new OrientationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Robot".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Robot:
	//	{Robot}
	//	'Robot'
	//	name=EString
	//	'{' ('statements' '{' statements+=Statement ("," statements+=Statement)* '}')?
	//	'}';
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	//Statement:
	//	Comment | Singleton | Trace | BuildWall | DropMark | WhileStatement | RepeatStatement | IfElseStatement | IfStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Expression:
	//	Full | Mark | Ahead | Heading | And | Not;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Comment:
	//	'Comment'
	//	'{'
	//	'comment' comment=EString
	//	'}';
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//Singleton:
	//	'Singleton'
	//	'{'
	//	'type' type=SingletonTypes
	//	'}';
	public SingletonElements getSingletonAccess() {
		return pSingleton;
	}
	
	public ParserRule getSingletonRule() {
		return getSingletonAccess().getRule();
	}
	
	//Trace:
	//	{Trace}
	//	'Trace'
	//	'{' ('text' text=String0)?
	//	'}';
	public TraceElements getTraceAccess() {
		return pTrace;
	}
	
	public ParserRule getTraceRule() {
		return getTraceAccess().getRule();
	}
	
	//BuildWall:
	//	'BuildWall'
	//	'{'
	//	'row' row=EInt
	//	'col' col=EInt
	//	'}';
	public BuildWallElements getBuildWallAccess() {
		return pBuildWall;
	}
	
	public ParserRule getBuildWallRule() {
		return getBuildWallAccess().getRule();
	}
	
	//DropMark:
	//	'DropMark'
	//	'{'
	//	'row' row=EInt
	//	'col' col=EInt
	//	'}';
	public DropMarkElements getDropMarkAccess() {
		return pDropMark;
	}
	
	public ParserRule getDropMarkRule() {
		return getDropMarkAccess().getRule();
	}
	
	//WhileStatement:
	//	'WhileStatement'
	//	'{'
	//	'cond' cond=Expression ('body' '{' body+=Statement ("," body+=Statement)* '}')?
	//	'}';
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}
	
	//RepeatStatement:
	//	'RepeatStatement'
	//	'{'
	//	'times' times=EInt ('body' '{' body+=Statement ("," body+=Statement)* '}')?
	//	'}';
	public RepeatStatementElements getRepeatStatementAccess() {
		return pRepeatStatement;
	}
	
	public ParserRule getRepeatStatementRule() {
		return getRepeatStatementAccess().getRule();
	}
	
	//IfElseStatement:
	//	'IfElseStatement'
	//	'{'
	//	'cond' cond=Expression ('ifbody' '{' ifbody+=Statement ("," ifbody+=Statement)* '}')? ('elsebody' '{'
	//	elsebody+=Statement ("," elsebody+=Statement)* '}')?
	//	'}';
	public IfElseStatementElements getIfElseStatementAccess() {
		return pIfElseStatement;
	}
	
	public ParserRule getIfElseStatementRule() {
		return getIfElseStatementAccess().getRule();
	}
	
	//IfStatement:
	//	'IfStatement'
	//	'{'
	//	'cond' cond=Expression ('body' '{' body+=Statement ("," body+=Statement)* '}')?
	//	'}';
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//enum SingletonTypes:
	//	step | turnLeft | drop | pick;
	public SingletonTypesElements getSingletonTypesAccess() {
		return eSingletonTypes;
	}
	
	public EnumRule getSingletonTypesRule() {
		return getSingletonTypesAccess().getRule();
	}
	
	//String0 String:
	//	'String'
	//	'{'
	//	'text' text=EString
	//	'}';
	public String0Elements getString0Access() {
		return pString0;
	}
	
	public ParserRule getString0Rule() {
		return getString0Access().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//Full:
	//	{Full}
	//	'Full';
	public FullElements getFullAccess() {
		return pFull;
	}
	
	public ParserRule getFullRule() {
		return getFullAccess().getRule();
	}
	
	//Mark:
	//	{Mark}
	//	'Mark';
	public MarkElements getMarkAccess() {
		return pMark;
	}
	
	public ParserRule getMarkRule() {
		return getMarkAccess().getRule();
	}
	
	//Ahead:
	//	{Ahead}
	//	'Ahead';
	public AheadElements getAheadAccess() {
		return pAhead;
	}
	
	public ParserRule getAheadRule() {
		return getAheadAccess().getRule();
	}
	
	//Heading:
	//	'Heading'
	//	'{'
	//	'wind' wind=Orientation
	//	'}';
	public HeadingElements getHeadingAccess() {
		return pHeading;
	}
	
	public ParserRule getHeadingRule() {
		return getHeadingAccess().getRule();
	}
	
	//And:
	//	'And'
	//	'{'
	//	'a' a=Expression
	//	'b' b=Expression
	//	'}';
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Not:
	//	'Not'
	//	'{'
	//	'e' e=Expression
	//	'}';
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}
	
	//enum Orientation:
	//	south | north | east | west;
	public OrientationElements getOrientationAccess() {
		return eOrientation;
	}
	
	public EnumRule getOrientationRule() {
		return getOrientationAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
