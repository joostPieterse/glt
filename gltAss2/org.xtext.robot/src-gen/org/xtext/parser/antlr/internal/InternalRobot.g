/*
 * generated by Xtext 2.11.0
 */
grammar InternalRobot;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.RobotGrammarAccess;

}

@parser::members {

 	private RobotGrammarAccess grammarAccess;

    public InternalRobotParser(TokenStream input, RobotGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Robot";
   	}

   	@Override
   	protected RobotGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRobot
entryRuleRobot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRobotRule()); }
	iv_ruleRobot=ruleRobot
	{ $current=$iv_ruleRobot.current; }
	EOF;

// Rule Robot
ruleRobot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRobotAccess().getRobotAction_0(),
					$current);
			}
		)
		otherlv_1='Script'
		{
			newLeafNode(otherlv_1, grammarAccess.getRobotAccess().getScriptKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_NAME
				{
					newLeafNode(lv_name_2_0, grammarAccess.getRobotAccess().getNameNAMETerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRobotRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.xtext.Robot.NAME");
				}
			)
		)
		otherlv_3='runs'
		{
			newLeafNode(otherlv_3, grammarAccess.getRobotAccess().getRunsKeyword_3());
		}
		otherlv_4='as'
		{
			newLeafNode(otherlv_4, grammarAccess.getRobotAccess().getAsKeyword_4());
		}
		(
			otherlv_5='\n'
			{
				newLeafNode(otherlv_5, grammarAccess.getRobotAccess().getLineFeedKeyword_5());
			}
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRobotAccess().getStatementsStatementParserRuleCall_6_0_0());
					}
					lv_statements_6_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRobotRule());
						}
						add(
							$current,
							"statements",
							lv_statements_6_0,
							"org.xtext.Robot.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7='\n'
				{
					newLeafNode(otherlv_7, grammarAccess.getRobotAccess().getLineFeedKeyword_6_1());
				}
			)?
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getRobotAccess().getStatementsStatementParserRuleCall_6_2_0_0());
						}
						lv_statements_8_0=ruleStatement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRobotRule());
							}
							add(
								$current,
								"statements",
								lv_statements_8_0,
								"org.xtext.Robot.Statement");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_9='\n'
					{
						newLeafNode(otherlv_9, grammarAccess.getRobotAccess().getLineFeedKeyword_6_2_1());
					}
				)?
			)*
		)?
		otherlv_10='end'
		{
			newLeafNode(otherlv_10, grammarAccess.getRobotAccess().getEndKeyword_7());
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getCommentParserRuleCall_0());
		}
		this_Comment_0=ruleComment
		{
			$current = $this_Comment_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSingletonParserRuleCall_1());
		}
		this_Singleton_1=ruleSingleton
		{
			$current = $this_Singleton_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getTraceParserRuleCall_2());
		}
		this_Trace_2=ruleTrace
		{
			$current = $this_Trace_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getBuildWallParserRuleCall_3());
		}
		this_BuildWall_3=ruleBuildWall
		{
			$current = $this_BuildWall_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getDropMarkParserRuleCall_4());
		}
		this_DropMark_4=ruleDropMark
		{
			$current = $this_DropMark_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_5());
		}
		this_WhileStatement_5=ruleWhileStatement
		{
			$current = $this_WhileStatement_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getRepeatStatementParserRuleCall_6());
		}
		this_RepeatStatement_6=ruleRepeatStatement
		{
			$current = $this_RepeatStatement_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIfElseStatementParserRuleCall_7());
		}
		this_IfElseStatement_7=ruleIfElseStatement
		{
			$current = $this_IfElseStatement_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAtomic
entryRuleAtomic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicRule()); }
	iv_ruleAtomic=ruleAtomic
	{ $current=$iv_ruleAtomic.current; }
	EOF;

// Rule Atomic
ruleAtomic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAtomicAccess().getFullParserRuleCall_0());
		}
		this_Full_0=ruleFull
		{
			$current = $this_Full_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAtomicAccess().getMarkParserRuleCall_1());
		}
		this_Mark_1=ruleMark
		{
			$current = $this_Mark_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAtomicAccess().getAheadParserRuleCall_2());
		}
		this_Ahead_2=ruleAhead
		{
			$current = $this_Ahead_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAtomicAccess().getHeadingParserRuleCall_3());
		}
		this_Heading_3=ruleHeading
		{
			$current = $this_Heading_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAtomicAccess().getNotParserRuleCall_4());
		}
		this_Not_4=ruleNot
		{
			$current = $this_Not_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getExpressionAccess().getExpressionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getAAtomicParserRuleCall_1_0());
				}
				lv_a_1_0=ruleAtomic
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"a",
						lv_a_1_0,
						"org.xtext.Robot.Atomic");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_2='and'
				{
					newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getAndKeyword_2_0_0());
				}
				    |
				otherlv_3='or'
				{
					newLeafNode(otherlv_3, grammarAccess.getExpressionAccess().getOrKeyword_2_0_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getBExpressionParserRuleCall_2_1_0());
					}
					lv_b_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"b",
							lv_b_4_0,
							"org.xtext.Robot.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleComment
entryRuleComment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommentRule()); }
	iv_ruleComment=ruleComment
	{ $current=$iv_ruleComment.current; }
	EOF;

// Rule Comment
ruleComment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCommentAccess().getCommentAction_0(),
					$current);
			}
		)
		this_COMMENTTEXT_1=RULE_COMMENTTEXT
		{
			newLeafNode(this_COMMENTTEXT_1, grammarAccess.getCommentAccess().getCOMMENTTEXTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleSingleton
entryRuleSingleton returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingletonRule()); }
	iv_ruleSingleton=ruleSingleton
	{ $current=$iv_ruleSingleton.current; }
	EOF;

// Rule Singleton
ruleSingleton returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSingletonAccess().getTypeSingletonTypesEnumRuleCall_0());
			}
			lv_type_0_0=ruleSingletonTypes
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getSingletonRule());
				}
				set(
					$current,
					"type",
					lv_type_0_0,
					"org.xtext.Robot.SingletonTypes");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleTrace
entryRuleTrace returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTraceRule()); }
	iv_ruleTrace=ruleTrace
	{ $current=$iv_ruleTrace.current; }
	EOF;

// Rule Trace
ruleTrace returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTraceAccess().getTraceAction_0(),
					$current);
			}
		)
		otherlv_1='trace'
		{
			newLeafNode(otherlv_1, grammarAccess.getTraceAccess().getTraceKeyword_1());
		}
		(
			(
				lv_text_2_0=RULE_STRING
				{
					newLeafNode(lv_text_2_0, grammarAccess.getTraceAccess().getTextSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTraceRule());
					}
					setWithLastConsumed(
						$current,
						"text",
						lv_text_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleBuildWall
entryRuleBuildWall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBuildWallRule()); }
	iv_ruleBuildWall=ruleBuildWall
	{ $current=$iv_ruleBuildWall.current; }
	EOF;

// Rule BuildWall
ruleBuildWall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='buildWall'
		{
			newLeafNode(otherlv_0, grammarAccess.getBuildWallAccess().getBuildWallKeyword_0());
		}
		otherlv_1='at'
		{
			newLeafNode(otherlv_1, grammarAccess.getBuildWallAccess().getAtKeyword_1());
		}
		otherlv_2='row:'
		{
			newLeafNode(otherlv_2, grammarAccess.getBuildWallAccess().getRowKeyword_2());
		}
		(
			(
				lv_row_3_0=RULE_PROPERINT
				{
					newLeafNode(lv_row_3_0, grammarAccess.getBuildWallAccess().getRowPROPERINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBuildWallRule());
					}
					setWithLastConsumed(
						$current,
						"row",
						lv_row_3_0,
						"org.xtext.Robot.PROPERINT");
				}
			)
		)
		otherlv_4='col:'
		{
			newLeafNode(otherlv_4, grammarAccess.getBuildWallAccess().getColKeyword_4());
		}
		(
			(
				lv_col_5_0=RULE_PROPERINT
				{
					newLeafNode(lv_col_5_0, grammarAccess.getBuildWallAccess().getColPROPERINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBuildWallRule());
					}
					setWithLastConsumed(
						$current,
						"col",
						lv_col_5_0,
						"org.xtext.Robot.PROPERINT");
				}
			)
		)
	)
;

// Entry rule entryRuleDropMark
entryRuleDropMark returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDropMarkRule()); }
	iv_ruleDropMark=ruleDropMark
	{ $current=$iv_ruleDropMark.current; }
	EOF;

// Rule DropMark
ruleDropMark returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='dropMark'
		{
			newLeafNode(otherlv_0, grammarAccess.getDropMarkAccess().getDropMarkKeyword_0());
		}
		otherlv_1='at'
		{
			newLeafNode(otherlv_1, grammarAccess.getDropMarkAccess().getAtKeyword_1());
		}
		otherlv_2='row:'
		{
			newLeafNode(otherlv_2, grammarAccess.getDropMarkAccess().getRowKeyword_2());
		}
		(
			(
				lv_row_3_0=RULE_PROPERINT
				{
					newLeafNode(lv_row_3_0, grammarAccess.getDropMarkAccess().getRowPROPERINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDropMarkRule());
					}
					setWithLastConsumed(
						$current,
						"row",
						lv_row_3_0,
						"org.xtext.Robot.PROPERINT");
				}
			)
		)
		otherlv_4='col:'
		{
			newLeafNode(otherlv_4, grammarAccess.getDropMarkAccess().getColKeyword_4());
		}
		(
			(
				lv_col_5_0=RULE_PROPERINT
				{
					newLeafNode(lv_col_5_0, grammarAccess.getDropMarkAccess().getColPROPERINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDropMarkRule());
					}
					setWithLastConsumed(
						$current,
						"col",
						lv_col_5_0,
						"org.xtext.Robot.PROPERINT");
				}
			)
		)
	)
;

// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileStatementRule()); }
	iv_ruleWhileStatement=ruleWhileStatement
	{ $current=$iv_ruleWhileStatement.current; }
	EOF;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStatementAccess().getCondExpressionParserRuleCall_1_0());
				}
				lv_cond_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
					}
					set(
						$current,
						"cond",
						lv_cond_1_0,
						"org.xtext.Robot.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='do'
		{
			newLeafNode(otherlv_2, grammarAccess.getWhileStatementAccess().getDoKeyword_2());
		}
		(
			otherlv_3='\n'
			{
				newLeafNode(otherlv_3, grammarAccess.getWhileStatementAccess().getLineFeedKeyword_3());
			}
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getWhileStatementAccess().getBodyStatementParserRuleCall_4_0_0());
					}
					lv_body_4_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
						}
						add(
							$current,
							"body",
							lv_body_4_0,
							"org.xtext.Robot.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5='\n'
				{
					newLeafNode(otherlv_5, grammarAccess.getWhileStatementAccess().getLineFeedKeyword_4_1());
				}
			)?
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getWhileStatementAccess().getBodyStatementParserRuleCall_4_2_0_0());
						}
						lv_body_6_0=ruleStatement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
							}
							add(
								$current,
								"body",
								lv_body_6_0,
								"org.xtext.Robot.Statement");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_7='\n'
					{
						newLeafNode(otherlv_7, grammarAccess.getWhileStatementAccess().getLineFeedKeyword_4_2_1());
					}
				)?
			)*
		)?
		otherlv_8='end'
		{
			newLeafNode(otherlv_8, grammarAccess.getWhileStatementAccess().getEndKeyword_5());
		}
	)
;

// Entry rule entryRuleRepeatStatement
entryRuleRepeatStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepeatStatementRule()); }
	iv_ruleRepeatStatement=ruleRepeatStatement
	{ $current=$iv_ruleRepeatStatement.current; }
	EOF;

// Rule RepeatStatement
ruleRepeatStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='repeat'
		{
			newLeafNode(otherlv_0, grammarAccess.getRepeatStatementAccess().getRepeatKeyword_0());
		}
		(
			(
				lv_times_1_0=RULE_PROPERINT
				{
					newLeafNode(lv_times_1_0, grammarAccess.getRepeatStatementAccess().getTimesPROPERINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRepeatStatementRule());
					}
					setWithLastConsumed(
						$current,
						"times",
						lv_times_1_0,
						"org.xtext.Robot.PROPERINT");
				}
			)
		)
		otherlv_2='times'
		{
			newLeafNode(otherlv_2, grammarAccess.getRepeatStatementAccess().getTimesKeyword_2());
		}
		(
			otherlv_3='\n'
			{
				newLeafNode(otherlv_3, grammarAccess.getRepeatStatementAccess().getLineFeedKeyword_3());
			}
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRepeatStatementAccess().getBodyStatementParserRuleCall_4_0_0());
					}
					lv_body_4_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRepeatStatementRule());
						}
						add(
							$current,
							"body",
							lv_body_4_0,
							"org.xtext.Robot.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5='\n'
				{
					newLeafNode(otherlv_5, grammarAccess.getRepeatStatementAccess().getLineFeedKeyword_4_1());
				}
			)?
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getRepeatStatementAccess().getBodyStatementParserRuleCall_4_2_0_0());
						}
						lv_body_6_0=ruleStatement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRepeatStatementRule());
							}
							add(
								$current,
								"body",
								lv_body_6_0,
								"org.xtext.Robot.Statement");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_7='\n'
					{
						newLeafNode(otherlv_7, grammarAccess.getRepeatStatementAccess().getLineFeedKeyword_4_2_1());
					}
				)?
			)*
		)?
		otherlv_8='end'
		{
			newLeafNode(otherlv_8, grammarAccess.getRepeatStatementAccess().getEndKeyword_5());
		}
	)
;

// Entry rule entryRuleIfElseStatement
entryRuleIfElseStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfElseStatementRule()); }
	iv_ruleIfElseStatement=ruleIfElseStatement
	{ $current=$iv_ruleIfElseStatement.current; }
	EOF;

// Rule IfElseStatement
ruleIfElseStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfElseStatementAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfElseStatementAccess().getCondExpressionParserRuleCall_1_0());
				}
				lv_cond_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfElseStatementRule());
					}
					set(
						$current,
						"cond",
						lv_cond_1_0,
						"org.xtext.Robot.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='do'
		{
			newLeafNode(otherlv_2, grammarAccess.getIfElseStatementAccess().getDoKeyword_2());
		}
		(
			otherlv_3='\n'
			{
				newLeafNode(otherlv_3, grammarAccess.getIfElseStatementAccess().getLineFeedKeyword_3());
			}
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getIfElseStatementAccess().getIfbodyStatementParserRuleCall_4_0_0());
					}
					lv_ifbody_4_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfElseStatementRule());
						}
						add(
							$current,
							"ifbody",
							lv_ifbody_4_0,
							"org.xtext.Robot.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5='\n'
				{
					newLeafNode(otherlv_5, grammarAccess.getIfElseStatementAccess().getLineFeedKeyword_4_1());
				}
			)?
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getIfElseStatementAccess().getIfbodyStatementParserRuleCall_4_2_0_0());
						}
						lv_ifbody_6_0=ruleStatement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIfElseStatementRule());
							}
							add(
								$current,
								"ifbody",
								lv_ifbody_6_0,
								"org.xtext.Robot.Statement");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_7='\n'
					{
						newLeafNode(otherlv_7, grammarAccess.getIfElseStatementAccess().getLineFeedKeyword_4_2_1());
					}
				)?
			)*
		)?
		(
			otherlv_8='else'
			{
				newLeafNode(otherlv_8, grammarAccess.getIfElseStatementAccess().getElseKeyword_5_0());
			}
			otherlv_9='do'
			{
				newLeafNode(otherlv_9, grammarAccess.getIfElseStatementAccess().getDoKeyword_5_1());
			}
			(
				otherlv_10='\n'
				{
					newLeafNode(otherlv_10, grammarAccess.getIfElseStatementAccess().getLineFeedKeyword_5_2());
				}
			)?
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getIfElseStatementAccess().getElsebodyStatementParserRuleCall_5_3_0_0());
						}
						lv_elsebody_11_0=ruleStatement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIfElseStatementRule());
							}
							add(
								$current,
								"elsebody",
								lv_elsebody_11_0,
								"org.xtext.Robot.Statement");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_12='\n'
					{
						newLeafNode(otherlv_12, grammarAccess.getIfElseStatementAccess().getLineFeedKeyword_5_3_1());
					}
				)?
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getIfElseStatementAccess().getElsebodyStatementParserRuleCall_5_3_2_0_0());
							}
							lv_elsebody_13_0=ruleStatement
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getIfElseStatementRule());
								}
								add(
									$current,
									"elsebody",
									lv_elsebody_13_0,
									"org.xtext.Robot.Statement");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_14='\n'
						{
							newLeafNode(otherlv_14, grammarAccess.getIfElseStatementAccess().getLineFeedKeyword_5_3_2_1());
						}
					)?
				)*
			)?
		)?
		otherlv_15='end'
		{
			newLeafNode(otherlv_15, grammarAccess.getIfElseStatementAccess().getEndKeyword_6());
		}
	)
;

// Entry rule entryRuleFull
entryRuleFull returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFullRule()); }
	iv_ruleFull=ruleFull
	{ $current=$iv_ruleFull.current; }
	EOF;

// Rule Full
ruleFull returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFullAccess().getFullAction_0(),
					$current);
			}
		)
		otherlv_1='full'
		{
			newLeafNode(otherlv_1, grammarAccess.getFullAccess().getFullKeyword_1());
		}
	)
;

// Entry rule entryRuleMark
entryRuleMark returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMarkRule()); }
	iv_ruleMark=ruleMark
	{ $current=$iv_ruleMark.current; }
	EOF;

// Rule Mark
ruleMark returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMarkAccess().getMarkAction_0(),
					$current);
			}
		)
		otherlv_1='mark'
		{
			newLeafNode(otherlv_1, grammarAccess.getMarkAccess().getMarkKeyword_1());
		}
	)
;

// Entry rule entryRuleAhead
entryRuleAhead returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAheadRule()); }
	iv_ruleAhead=ruleAhead
	{ $current=$iv_ruleAhead.current; }
	EOF;

// Rule Ahead
ruleAhead returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAheadAccess().getAheadAction_0(),
					$current);
			}
		)
		otherlv_1='wall'
		{
			newLeafNode(otherlv_1, grammarAccess.getAheadAccess().getWallKeyword_1());
		}
		otherlv_2='ahead'
		{
			newLeafNode(otherlv_2, grammarAccess.getAheadAccess().getAheadKeyword_2());
		}
	)
;

// Entry rule entryRuleHeading
entryRuleHeading returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHeadingRule()); }
	iv_ruleHeading=ruleHeading
	{ $current=$iv_ruleHeading.current; }
	EOF;

// Rule Heading
ruleHeading returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='heading'
		{
			newLeafNode(otherlv_0, grammarAccess.getHeadingAccess().getHeadingKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHeadingAccess().getWindOrientationEnumRuleCall_1_0());
				}
				lv_wind_1_0=ruleOrientation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHeadingRule());
					}
					set(
						$current,
						"wind",
						lv_wind_1_0,
						"org.xtext.Robot.Orientation");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNot
entryRuleNot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotRule()); }
	iv_ruleNot=ruleNot
	{ $current=$iv_ruleNot.current; }
	EOF;

// Rule Not
ruleNot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='not'
		{
			newLeafNode(otherlv_0, grammarAccess.getNotAccess().getNotKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNotAccess().getEAtomicParserRuleCall_1_0());
				}
				lv_e_1_0=ruleAtomic
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNotRule());
					}
					set(
						$current,
						"e",
						lv_e_1_0,
						"org.xtext.Robot.Atomic");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Rule SingletonTypes
ruleSingletonTypes returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='step'
			{
				$current = grammarAccess.getSingletonTypesAccess().getStepEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getSingletonTypesAccess().getStepEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='turnLeft'
			{
				$current = grammarAccess.getSingletonTypesAccess().getTurnLeftEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getSingletonTypesAccess().getTurnLeftEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='drop'
			{
				$current = grammarAccess.getSingletonTypesAccess().getDropEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getSingletonTypesAccess().getDropEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='pick'
			{
				$current = grammarAccess.getSingletonTypesAccess().getPickEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getSingletonTypesAccess().getPickEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule Orientation
ruleOrientation returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='south'
			{
				$current = grammarAccess.getOrientationAccess().getSouthEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOrientationAccess().getSouthEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='north'
			{
				$current = grammarAccess.getOrientationAccess().getNorthEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOrientationAccess().getNorthEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='east'
			{
				$current = grammarAccess.getOrientationAccess().getEastEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getOrientationAccess().getEastEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='west'
			{
				$current = grammarAccess.getOrientationAccess().getWestEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getOrientationAccess().getWestEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_NAME : ('a'..'z'|'A'..'Z')+;

RULE_COMMENTTEXT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_PROPERINT : ('0'|'1'..'9' ('0'..'9')*);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
